= Gustavo Matias's Java Programming Style Guide
 
You may not like all rules presented here, but they work very well for
me and have helped producing high quality code. Everyone is free to
code however they want, write and follow their own style guides, but
when you contribute to my code, please follow these rules:
 
 
== Formatting:
 
* Use UTF-8.
 
* Use 2 space indent, no tabs.
 
* Use Unix-style line endings.
 
* Use spaces around operators, after commas, colons and semicolons,
  around { and before }.
 
* No spaces after (, [ and before ], ).
 
* Use an empty line before the return value of a method (unless it
  only has one line), and an empty line between defs.
 
* Use empty lines to break up a long method into logical paragraphs.
 
* Keep lines fewer than 80 characters.
 
* Strip trailing whitespace.
 
 
== Syntax:
 
* Avoid multiline ?:, use if.
 
* Avoid return where not required.
 
== Naming:
 
* Use CamelCase. (Keep acronyms like HTTP,
  RFC, XML uppercase.)
 
* Use SCREAMING_SNAKE_CASE for other constants.
 
* Do not use single letter variable names. Avoid uncommunicative names (unless you're in a function that has a very small scope: 5 lines or less).
 
* Use consistent variable names. Try to keep the variable names close
  to the object class name.
 
== Comments:
 
* Comments longer than a word are capitalized and use punctuation.
  Use one space after periods.
 
* Avoid superfluous comments.
 
 
== The rest:
 
* Avoid long methods.
 
* Avoid long parameter lists.
 
* Avoid needless metaprogramming.
 
* Only give a method one purpose for existing. If you pass in a boolean
  to a method, what you're saying is that this method has two different
  behaviours. Just split it into two single purpose methods. If you have
  to use the words "AND" or "OR" to describe what the method does it
  probably does too much.
 
* If sections of a method are logically separate by blank lines, then
  that's probably a sign that those sections should be split into separate
  methods.
 
* Try to keep methods at no more than 10 lines long, and preferably
  5 or less.
 
== General:
 
* Code in a functional way, avoid mutation when it makes sense.
 
* Try to have methods either return the state of the object and have
  no side effects, or return self and have side effects. This is
  otherwise known as Command-query separation (CQS):
 
    http://en.wikipedia.org/wiki/Command-query_separation
 
* Do not mutate arguments unless that is the purpose of the method.
 
* Do not program defensively.
  (See http://www.erlang.se/doc/programming_rules.shtml#HDR11.)
 
* Keep the code simple.
 
* Don't overdesign.
 
* Don't underdesign.

* Don't try to predict the future (YAGNI):

    http://xp.c2.com/YouArentGonnaNeedIt.html
 
* Avoid bugs.
 
* Read other style guides and apply the parts that don't dissent with
  this list.
 
* Be consistent.
 
* Use common sense.
